[package]
name = "mapage"
version = "0.1.0"
edition = "2021"
license = "MIT OR Apache-2.0"
description = "Type-namespaced key value storage with GraphQL"
readme = "README.md"
repository = "https://github.com/coruscateor/mapage"
homepage = "https://coruscateor.com/projects/mapage"
keywords = ["memory", "cache", "server", "map", "storage"]
categories = ["caching"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
async-graphql = "5.0.7"
async-graphql-poem = "5.0.7"
tokio = { version = "1.*", features = ["macros", "rt-multi-thread"] } #, "rt", "tokio_unstable"] } #24.* #tokio = { version = "1.19.2", features = ["rt", "rt-multi-thread", "sync", "macros", "fs"] }
poem = "1.3.*"
#corlib = { path="../corlib" } #Do not remove
corlib = "0.1.0"
#act_rusty = { path="../act_rusty" }
#act_rs = { path="../act_rs" } #Do not remove
#act_rs = "0.1.0"
#scc = "0.11.*"
scc = "1.*" #"1.0.*"
#async-trait = "0.1.57"
serde = { version = "1.0.*", features = ["derive"] } #"1.0.144"
paste = "1.*" #.0.11"
dashmap = "5.4.0"
cfg-if = "1.0.0"
delegate = "0.9.0"

[features]

#Storage Atomicity:

#aml - Atomicity Level

store_aml = []      
sub_store_aml = []  #Implemented

#features with sub_store_aml:

#Maps:

#std_col_hashmap = []
#scc_hashmap = []
#scc_hashindex = []
#scc_treeindex = []
#dashmap

#defaults:

#scc_hashmap_string = []
#dashmap_string = []

scc_hashmap_namespaces = []
dashmap_namespaces = []

#User Types:

all_types = []
bool = []
char = []
f32 = []
f64 = []
i8 = []
i16 = []
i32 = []
i64 = []
i128 = []
isize = []
String = []
u8 = []
u16 = []
u32 = []
u64 = []
u128 = []
#unit_value = []
usize = []
Whatever = []
SelectedType = []
#SelectedType_OI_Only = []
SelectedTypeIO = []

#Arc:

#std_sync_arc

#Sync Types:

#std_sync_mutex = []
#std_sync_rwlock = []
#crossbeam_sync_shardedlock = []
#parking_lot_fairmutex = []
#parking_lot_mutex = []
#parking_lot_rwlock = []
#tokio_sync_mutex = []
#tokio_sync_rwlock = []
#tokio_sync_semaphore

#Actrusty Actors:

#st_io_actor = []
#ts_io_actor = []
#ttsb_io_actor = []

#Map Types:

#std_col_hashmap = []
#scc_hashmap = []
#scc_hashindex = []
#scc_treeindex = []
#dashmap = []

#Atomics

#std_sync_atomics #atomics by default (where applicable)
#std_sync_atomic_bool
#std_sync_atomic_i8
#std_sync_atomic_i16
#std_sync_atomic_i32
#std_sync_atomic_i64
#std_sync_atomic_isize
### atomic_ptr
#std_sync_atomic_u8
#std_sync_atomic_u16
#std_sync_atomic_u32
#std_sync_atomic_u64
#std_sync_atomic_usize

#Features will comprise of combinations of the above

###

#specifics

#sub_store features:

#<sync_type or map type>_<user type>

#Value Type Features:

#<actor type>_value

#User Type Specific Actor Value Types:

#<actor type>_<user type>_value

#arc_value

#arc_<user type>_value

#Applicable only to collections and atomics

#When used with collections creates a sitiaution where the collection is stored in the arc and replaced when it needs to be mutated.

#Atomics:

#atomic_value

#atomic_<user type>_value

#Applicable only to user types which have std atomic counterparts


#sync type values:

#<sync type>_value

#User Type Specific Actor Value Types:

#<sync type>_<user type>_value

